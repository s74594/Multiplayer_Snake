@startuml
'https://plantuml.com/class-diagram
'- Indicates private
'+ Indicates public
'# Indicates protected

package "snake <module>" {
    class Snake {
        +start(Stage) : void
        +{static}main(String[]) : void
    }

    package model {
        class Player {
            +points : Text
            +name : Text
            +snakeX : double
            +snakeY : double
            +snakeXP2 : double
            +snakeYP2 : double
            +fruitX : double
            +fruitY : double
            +snakeBounds : Bounds
            +snakeBoundsPlayerTwo : Bounds
            +fruitBounds : Bounds
            +eatfruit : boolean
            +gameOver : boolean
            +gameOverPlayerTwo : boolean
            ~snakeSpeed : double
            +snakeBodySize : int
            +snakeBodySizePlayerTwo : int
            +snakeBodyLocationsX : LinkedList<Double>
            +snakeBodyLocationsY : LinkedList<Double>
            +snakeBodyLocationsXP2 : LinkedList<Double>
            +snakeBodyLocationsYP2 : LinkedList<Double>
            +movePlayer(double, double, KeyCode) : void
            +movePlayerTwo(double, double, KeyCode) : void
            -snakeBodyLocations() : void
            -snakeBodyLocationsPlayerTwo() : void
            +checkCollision() : void
            -gameOver() : void
            -gameOverPlayerTwo() : void
            +generateFood() : void
        }
    }

    package resources {
        class arenaView_fxml {}

        class frameGameInfo_fxml {}

        class gameSelectionView_fxml {}

        class highscoreView_fxml {}

        class loginView_fxml {}

        class registryView_fxml {}
    }

    package controller {
        class HighscoreController {
                    +Player_Pos1 : Label
                    +Player_Pos2 : Label
                    +Player_Pos3 : Label
                    -Player_Pos4 : Label
                    -Player_Pos5 : Label
                    -Player_Pos1_Points : Label
                    -Player_Pos2_Points : Label
                    -Player_Pos3_Points : Label
                    -Player_Pos4_Points : Label
                    -Player_Pos5_Points : Label
                    -Player_Pos1_Date : Label
                    -Player_Pos2_Date : Label
                    -Player_Pos3_Date : Label
                    -Player_Pos4_Date : Label
                    -Player_Pos5_Date : Label
                    +highscore_table : TableView
                    -{static}highscoreList : List<String[]>
                    ~arr : Label[]
                    ~initialize() : void
                    +{static}setHighscoreList(JSONArray) : void
        }
        class ArenaController {
            -model : Player
            -modelPlayerTwo : Player
            +namePlayer1 : Text
            +namePlayer2 : Text
            +scorePlayer1 : Text
            +scorePlayer2 : Text
            +playGround1 : Pane
            +playGround2 : Pane
            +snakeHead : Circle
            -snakeHeadPlayerTwo : Circle
            -avatarPlayerOne : ImageView
            -avatarPlayerTwo : ImageView
            +snakeTailCircle : Circle
            -exitBTNMenu : MenuItem
            -HighscoreBTN : MenuItem
            -gameInfoBTNMenu : MenuItem
            +foodImage : ImageView
            +foodImage1 : ImageView
            +{static}millis : double
            +point_counter_player1 : int
            +point_counter_player2 : int
            +snakeBody : Circle[]
            +bodyPlayerTwoCircles : Circle[]
            ~centerWindowScreen : CenterWindowScreen
            ~animationDirection : KeyEvent
            ~animationDirectionPlayerTwo : KeyEvent
            ~timer : AnimationTimer
            ~timerPlayerTwo : AnimationTimer
            ~initialize() : void
            +delete() : void
            +custom_Snake_Color(Color) : void
            +generateFood() : void
            +generateFoodPlayerTwo() : void
            ~onExitMenuClick(ActionEvent) : void
            ~onGameInfoMenuClick(ActionEvent) : void
            ~onHighscoreBTNClick((ActionEvent) : void
            -gameSelection() : void
            ~snakeSteering(KeyEvent) : void
        }

        class LoginController {
            -playButton : Button
            -button_signup : Button
            -exitButton : Button
            -exitBTNMenu : MenuItem
            -gameInfoBTNMenu : MenuItem
            -scoreLabel : Text
            -scoreLabelNumber : Label
            -player_name : TextField
            -player_password : PasswordField
            -pw_incorrect : Label
            -error_msg : Label
            -r_name : TextField
            -r_pw : TextField
            -rw_pw_check : TextField
            -backButton : Button
            -snakeColorPicker : ColorPicker
            -avatarIMG : ImageView
            -backBTN : Button
            -nextBTN : Button
            -{static}sqlRegisterUserAnswer : String
            ~pictures : ArrayList<String>
            +indexIMGCounter : int
            -{static}WIDTH : int
            -{static}HEIGHT : int
            -{static}ROWS : int
            -{static}COLUMNS : int
            -{static}SQUARE_SIZE : int
            -graphicsContext : GraphicsContext
            ~centerWindowScreen : CenterWindowScreen
            -event : ActionEvent
            ~initialize() : void
            #onPlayButtonClick(ActionEvent) : void
            ~customizeSnakeColor(ActionEvent) : void
            #Enter_Play(KeyEvent) : void
            #onExitButtonClick(ActionEvent) : void
            #onBackButton_Click(ActionEvent) : void
            #onSignupButtonClick(ActionEvent) : void
            +onRegisterButtonClick(ActionEvent) : void
            +onClearClick(ActionEvent) : void
            ~onNextClick(ActionEvent) : void
            ~onBackClick(ActionEvent) : void
        }
        class GameSelectionController {
                    -exitBTN : Button
                    -highscoreBTN : Button
                    -restartBTN : Button
                    ~centerWindowScreen : CenterWindowScreen
                    ~onExitButtonClick(ActionEvent) : void
                    ~onHighscoreBTNClick(ActionEvent) : void
                    ~onRestartGameBTNClick(ActionEvent) : void
        }

        class CenterWindowScreen {
            +CenterScreen(Stage) : void
        }
    }
    'connections
    Snake -- loginView_fxml

    ArenaController --> Player
    ArenaController -u-> arenaView_fxml

    ArenaController -- CenterWindowScreen
    ArenaController -- frameGameInfo_fxml
    LoginController -u-> loginView_fxml
    LoginController -u-> registryView_fxml

    LoginController -- CenterWindowScreen
    GameSelectionController -u- HighscoreController
    GameSelectionController -u-> gameSelectionView_fxml
    GameSelectionController -r- CenterWindowScreen
    HighscoreController -u-> highscoreView_fxml

    'layout
    ArenaController -[hidden]> Player

    package "network <module>" {
        package connector {
            class NetworkFacade {
                +{static}connect() : void
                +{static}login(String, String) : boolean
                +{static}register(String, String) : boolean
                +{static}setHighscore(String, int) : boolean
            }
            'connections
            HighscoreController -- NetworkFacade
            LoginController -- NetworkFacade
            ArenaController -- NetworkFacade
        }
        package "socket <module>" {
                package client {
                    class InputMessageHandler {
                        ~reader : BufferedReader
                        +InputMessageHandler(BufferedReader)
                        +run() : void
                        +onMessage(String) : void
                    }

                    class SocketClient {
                        +{static}socket : Socket
                        +{static}writer : PrintWriter
                        +{static}reader : BufferedReader
                        +{static}connect() : void
                    }
                    'connections
                    NetworkFacade -- SocketClient
                    SocketClient -- InputMessageHandler

                    'layout
                    NetworkFacade -[hidden]r> SocketClient
                }
            }
    }


}

package "server <module>" {
    package snakeserver {
            class SnakeServer {
                +{static}main(String[] args) : void
            }

        package database {
            class DatabaseController {
                +{static}connect() : Connection
                +{static}Select_Player_PW(String) : String
                +{static}Insert_Player(String, String, String) : String
                +{static}Get_Highscore() : List<String[]>
                +{static}Insert_Highscore(String, LocalDateTime, int) : void
                +Insert_Custom_Snake_Color(Color) : void
            }

            database "Database" {
            }
        }

        package handler {
            class BroadcastMessageHandler{
                +BroadcastMessageHandler(BufferedReader)
                +onMessage(String) : void
            }

            class MessageHandler {
                ~reader : BufferedReader
                +MessageHandler(BufferedReader)
                +run() : void
                +onMessage(String) : void
            }

            class Socket {
                ~{static}clientWriters : Set<PrintWriter>
                +{static}start(String[]) : void
                ~{static}broadcast(String) : void
            }
        }
        'connections
        SnakeServer -- Socket
        Socket -- DatabaseController
        DatabaseController <--> "Database"
        Socket -- BroadcastMessageHandler
        BroadcastMessageHandler --> MessageHandler
    }
}
'connections
SocketClient <..> SnakeServer : Network
@enduml